---
#- name: Create a Teleport SSH auth server instance
- hosts: localhost
  connection: local
  gather_facts: False
  become: False
  vars:
    key_name: 
    instance_type: t2.micro
    sg: 
    image: 
    region: 
    instance_name: 
    app: test
    backup: false 
    env: dev
    start_stop: "1"
    poc: 
    role: 
    subnet: 
    iam_profile: 

  tasks:
    - name: Launch instance
      ec2:
         key_name: "{{ key_name }}"
         group_id: "{{ sg }}"
         instance_type: "{{ instance_type }}"
         image: "{{ image }}"
         instance_profile_name: "{{ iam_profile }}"
         wait: true
         region: "{{ region }}"
         vpc_subnet_id: "{{ subnet }}"
         assign_public_ip: yes
         instance_tags:
             Backup: "{{ backup }}"
             POC: "{{ poc }}"
             Environment: "{{ env }}"
             Role: "{{ role }}"
             Name: "{{ instance_name }}"
             Team: "{{ app }}"  
             ec2startstop: "{{ start_stop }}"
      register: ec2

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        delay: 60
        timeout: 300
        state: started
      with_items: "{{ ec2.instances }}"

- name: Configure instance(s)
  hosts: launched
  become: True
  gather_facts: True
  roles:
  - role: teleport 
    vars: 
    - cluster: main
    - token: hello
    - table_name: teleport.state
    - teleport_config: |
          teleport:
            nodename: "{{ ansible_hostname }}"
            data_dir: /var/lib/teleport
            log:
              output: syslog
              severity: INFO
            storage:
              type: dynamodb
              region: 
              table_name: "{{ table_name }}"
              access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
              secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
            advertise_ip: "{{ ansible_host }}"
            auth_token: "{{ token }}"
          auth_service: 
            cluster_name: "{{ cluster }}"
            enabled: yes
            listen_addr: 0.0.0.0:3025
            tokens:
              - "proxy,node: {{ token }}"
            authentication:
              type: local
              second_factor: off
          ssh_service:
            enabled: no
          proxy_service:
            enabled: no

- name: Register instance with AWS System Manager
  hosts: launched
  become: True
  gather_facts: True
  roles:
  - role: aws_ssm

- name: Announce new host deployment
  hosts: rc01

  # Consider not use an role just to send notifications
  roles:
   - role: ansible_rc_alert
     vars:
     - instance_name: 
     - message: "Finished deploying {{ instance_name }}"

    
